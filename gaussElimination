#include<stdio.h>
#include<stdlib.h>

void printMatrix(float mat[][100], int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n + 1; j++)
        {
            printf("%.2f\t", mat[i][j]);
        }
        printf("\n");
    }
}

void gaussElimination(float mat[][100], int n)
{
    for (int i = 0; i < n; i++)
    {
        if (mat[i][i] == 0) {
            printf("Mathematical Error: Division by zero detected!\n");
            exit(EXIT_FAILURE);
        }
        
        for (int j = 0; j < n; j++)
        {
            if (j > i)
            {
                float ratio = mat[j][i] / mat[i][i];
                for (int k = 0; k < n + 1; k++)
                    mat[j][k] = mat[j][k] - ratio * mat[i][k];
            }
        }
    }
}

void findValues(float mat[][100], int n, float val[])
{
    val[n-1] = mat[n-1][n] / mat[n-1][n-1];

    for (int i = n-2; i >= 0; i--)
    {
        float sum = 0;
        for (int j = i+1; j<n; j++)
        {
            sum = sum + mat[i][j] * val[j];
        }
        val[i] = (mat[i][n] - sum) / mat[i][i];
    }
}

int main()
{
    int n;
    printf("Enter the order of matrix: ");
    scanf("%d", &n);

    float mat[100][100], val[100];
    printf("Enter augmented matrix: \n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n + 1; j++)
        {
            scanf("%f", &mat[i][j]);
        }
    }

    // Display augmented matrix
    printf("Augmented Matrix: \n");
    printMatrix(mat, n);

    // Perform Gauss Elimination
    gaussElimination(mat, n);
    printf("Upper Triangular Matrix: \n");
    printMatrix(mat, n);

    // Find the solution
    findValues(mat, n, val);

    // Print the solution
    printf("Solution: \n");
    for (int i = 0; i < n; i++)
        printf("x%d: %.2f\n", i, val[i]);

    return 0;
}
